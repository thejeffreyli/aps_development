function [blemish] = getblemish(ccdimginfo)
%
% modify ccdimginfo.usermask to incoorporate blemish files
%
% Michael Sprung
% $Revision: 1.0 $  $Date: 2005/09/14 $
%

% dummydate = ccdimginfo.start_time{1}                                       ;
% dummychar = [4 5 6 7 8 9 10 20 21 22 23 24]                                ;
% batchdate = datenum(datestr(datevec(dummydate(dummychar),'mmm dd yyyy')))  ;
% clear dummydate dummychar                                                  ;

% =========================================================================
% --- Detector 5 : DALSA
% =========================================================================
% if ( ccdimginfo.detector == 5 )
if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'DALSA', 'once')) )
    % ---
    b = ones(ccdimginfo.detector.SensorSizeRows                             ...
        ,ccdimginfo.detector.SensorSizeCols,'single')                       ;
    % ---
    b(      :      ,    1 :    4 ) = 0                                     ;
    b(      :      ,  254 :  256 ) = 0                                     ;
    b(      :      ,  257 :  260 ) = 0                                     ;
    b(      :      ,  510 :  512 ) = 0                                     ;
    b(      :      ,  513 :  516 ) = 0                                     ;
    b(      :      ,  766 :  768 ) = 0                                     ;
    b(      :      ,  769 :  772 ) = 0                                     ;
    b(      :      , 1023 : 1024 ) = 0                                     ;
    % ---
end


% =========================================================================
% --- Detector 6 : SMD CCD 1st Harmonic four times gain
% =========================================================================
% if ( ccdimginfo.detector == 6 )
if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'SMD', 'once')) )
    % ---
    b = ones(ccdimginfo.detector.SensorSizeRows                             ...
        ,ccdimginfo.detector.SensorSizeCols,'single')                       ;
    
    %     chip_change_date_1 = datenum(datestr(datevec('2010-07-21','yyyy-mm-dd')))     ; % SN 08032010
    
    % ---
    b(      :      ,    1 :    4 ) = 0                                     ;
    b(      :      ,  254 :  256 ) = 0                                     ;
    b(      :      ,  257 :  260 ) = 0                                     ;
    b(      :      ,  510 :  512 ) = 0                                     ;
    b(      :      ,  513 :  516 ) = 0                                     ;
    b(      :      ,  766 :  768 ) = 0                                     ;
    b(      :      ,  769 :  772 ) = 0                                     ;
    b(      :      , 1023 : 1024 ) = 0                                     ;
    % ---
    
    b(:,517:end)=0; %mask the two right panels
    
    %     if ( batchdate < chip_change_date_1 )
    %         %%%new chip changed on 07/21/2010 by Tim Madden
    %         b(    1 :    8 ,      :      ) = 0                                     ; % MS 031408 from lead tape
    %         % --- The 3 polygons below are added SN 06122008
    %         b(18:38,920:960) = 0;
    %         b(78:108,920:970) = 0;
    %         b(18:123,970:1024) = 0;
    %         %%%new chip changed on 07/21/2010 by Tim Madden
    %         % --- The 3 polygons above are added SN 06122008
    %     end
    % --- polygon # 1 is replaced by
    %     b(    1 :  109 ,    1 :  67 ) = 0                                      ; % MS 032008 new chip
    % --- polygon # 2 is replaced by
    %     b(    1 :   45 ,  909 :1024 ) = 0                                      ; % MS 032008 new chip
    %     b(   45 :   68 ,  909 :1024 ) = 0                                      ; % MS 032008 new chip
    %     b(   68 :   88 ,  942 :1024 ) = 0                                      ; % MS 032008 new chip
    %     b(   88 :  131 ,  978 :1024 ) = 0                                      ; % MS 032008 new chip
    % --- polygon # 3 is replaced by
    %     b(  721 : 738 ,  436 :  462 ) = 0                                      ; % MS 032008 new chip
    % --- polygon # 4 (17ms data has rms >5) is replaced by
    %     b(  967 :  999 ,  936 : 949 ) = 0                                      ;
    % --- polygon # 5 (200ms data has rms >5) is replaced by
    %     b(  496 :  608 ,  909 : 936 ) = 0                                      ;
    % --- polygon # 6 (200ms data has rms >5) is replaced by
    %     b(  755 :  777 ,  695 :1024 ) = 0                                      ;
    % --- polygon # 7 (200ms data has rms >5) is replaced by
    %     b(    1 :   73 ,  736 : 962 ) = 0                                      ;
    %     b(   73 :  126 ,  738 : 957 ) = 0                                      ;
    %     b(  126 :  175 ,  752 : 957 ) = 0                                      ;
    %     b(  176 :  280 ,  777 : 957 ) = 0                                      ;
    % --- polygon # 8 (200ms data has rms >5) is replaced by
    %     b(  955 : 1008 ,  763 : 963 ) = 0                                      ;
    %     b(  764 :  954 ,  763 : 950 ) = 0                                      ;
end

% =========================================================================
% --- Detector 8 : PI-LCX 1300x1340
% =========================================================================
% if ( ccdimginfo.detector == 8 )
% if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'Princeton', 'once')) )
% %     % ---
%     b = ones(ccdimginfo.detector.SensorSizeRows                             ...
%             ,ccdimginfo.detector.SensorSizeCols,'single')                       ;
% %     % ---
% %     damagedate1 = datenum(datestr(datevec('2008-06-24','yyyy-mm-dd')))     ; % SN & MS 06242008
% %     if ( batchdate > damagedate1 )
%         b(1030:end,709)        = 0				           ; %SN and MS 06242008
%         b(200:end,1215:1217)   = 0				           ;
%         b(400:end,965:967)     = 0					   ;
%         b(1070:1090,1135)      = 0					   ;
%         b(1:800,1330:end)      = 0					   ;
%         b(801:end,1338:end)    = 0					   ;
%         b(1081:1082,1176:1180) = 0					   ;
%         b(1082:1084,1182:1183) = 0					   ;
%         b(867:872,961:964)     = 0					   ;
% %     end
%     % ---
% end
% =========================================================================
% --- Detector 13 : PI-CNM 1300x1340
% =========================================================================
% if ( ccdimginfo.detector == 13 )
if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'Princeton', 'once')) )
    % ---
    b = ones(ccdimginfo.detector.SensorSizeRows                             ...
        ,ccdimginfo.detector.SensorSizeCols,'single')                       ;
    % ---
    %3 or 4 major vertical streaks on Nov 8, 2015 at 21:32:44 hrs
    % % % % %     dataset: 2015-3/green201511/E002_PS_65K_OTS_100nm_125C_F1_001
    b(:,431:433)=0; %bad
    b(:,703:704)=0; %bad
    %to be safe, let us get adjacent cols also out
    b(:,430:434)=0; %bad
    b(:,702:705)=0; %bad
    
end


% =========================================================================
% --- Detector 14 : APS PILATUS DP00221
% =========================================================================
% if ( ccdimginfo.detector == 14 )
%     % ---
%     b = ones(ccdimginfo.detector.SensorSizeRows                             ...
%             ,ccdimginfo.detector.SensorSizeCols,'single')                       ;
%     % ---
%     b( 50: 52, 11: 13)   = 0		                     		           ;
%     b(147:149,188:190)   = 0		                    		           ;
%     b( 96: 99,241:244)   = 0		                    		           ;
%     b(106:108,372:374)   = 0			                    	           ;
%     b( 95: 98,425:428)   = 0				                               ;
%     % ---
% end


% =========================================================================
% --- Detector 15 : APS Detector Pool Fast CCD
% =========================================================================
% if ( ccdimginfo.detector == 15 )
if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'xxxxxLBL', 'once')) )
    % ---
    b = ones(ccdimginfo.detector.SensorSizeRows                             ...
        ,ccdimginfo.detector.SensorSizeCols,'single')                       ;
    b(:,1:10) = 0; % taps 1 and 96
    b(:,471:480) = 0; % taps 48 and 49
    b(1:10,:) = 0; % top rows
    b(end-9:end,:) = 0; % bottom rows
    b(1:247,331:340) = 0; % dead tap - tap 34
    b(1:247,418:419) = 0; % 2 bright columns
    b(1:24,416:420) = 0; % some bright pixels - see long exposures dark near 2 bright colsa above
    b(14:15, 407:409) = 0; % cool T - rounded up to a 2X3 block
    b(14:15, 417:419) = 0; % cool T - rounded up to a 2X3 block
    b(14:15, 427:429) = 0; % cool T - rounded up to a 2X3 block
    b(13:16,398:399) = 0; % cool
    b(13:17,407:409) = 0; % cool
    b(13:17,427:429) = 0; % cool
    b(13:16,437:439) = 0; % cool
    b(14:15,448:449) = 0; % cool
    b(14:15,468:469) = 0; % cool
    b(13:17,411:415) = 0; % cool
    b(14,398:399) = 0; % cool
    b(166:168, 196:197) = 0; % hot pixels - not sure why
    b(169:171, 198:199) = 0; % hot pixels - not sure why
    b(166:167, 195) = 0; % hot pixels - not sure why - see long exposures
    b(169:170, 197) = 0; % hot pixels - not sure why - see long exposures
    b(472:474, 356:358) = 0; % hot pixels - not sure why
    b(452:454,141:142)=0; % hot - not sure why
    b(455:457,144)=0; % hot - not sure why
    b(166:167,186) = 0; % see 100 ms, att 0 data
    b(169:170,188:189) = 0; % see 100 ms, att 0 data
    b(166:167,206) = 0; % see 100 ms, att 0 data
    b(169:170,208:209) = 0; % see 100 ms, att 0 data
    b(395,56:57) = 0; % see 100 ms, att 0 data
    b(398:399,59) = 0; % see 100 ms, att 0 data
    
    % bad 1/6 because of noise pickup on fcric
    %     b(1:247,321:end) = 0;
    
    % >= 60 V
    b(394:396, 56:57) = 0;
    b(474:475, 68:69) = 0;
    b(249:250, 143) = 0;
    b(254:255, 279:280) = 0;
    b(257:258, 282) = 0;
    b(280:285, 198:200) = 0;  % maybe a zinger
    % >= 80 V
    b(395,58)=0;
    b(384:385, 286:287) = 0;
    b(387:388, 288:289) = 0;
    
    b(32, 415:417)=0;% hot pixels x:415~417 32
end

% =========================================================================
% --- Detector 20 : ANL-LBL FCCD-2 frame transfer (NB3, came to APS in Oct 2015)
% =========================================================================
% % % if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'LBL', 'once')) )
% % %     if (ccdimginfo.detector.adu_per_photon > 10) %%kludge for FCCD or certainly not Eiger
% % %         % ---
% % %     b = ones(ccdimginfo.detector.SensorSizeRows                             ...
% % %             ,ccdimginfo.detector.SensorSizeCols,'single')                       ;
% % % % % %         % ---
% % %
% % %
% % %         if (ccdimginfo.detector.rows == 962)
% % %             b(1:480,431:440)=0;
% % %             b(1:480,731:740)=0;
% % %             b(1:480,951:960)=0;
% % %
% % %             b(481:end,641:650)=0;
% % %             b(481:end,691:700)=0;
% % %             b(481:end,741:750)=0;
% % %
% % %             b(481:end,321:330)=0; %%slightly bad
% % %         elseif (ccdimginfo.detector.rows == 92) %as of Aug 2014
% % % %             b(1:45,121:130)=0;
% % %         end
% % %
% % %     end
% % % end
% =========================================================================
% --- Detector 20 : ANL-LBL FCCD-2 frame transfer (NB2 original detector)
% =========================================================================
if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'LBL', 'once')) )
    if (ccdimginfo.detector.adu_per_photon > 10) %%kludge for FCCD or certainly not Eiger
        % ---
        b = ones(ccdimginfo.detector.SensorSizeRows                             ...
            ,ccdimginfo.detector.SensorSizeCols,'single')                       ;
        % ---
        
        
        if (ccdimginfo.detector.rows == 962)
            b(1:480,121:130)=0;
            b(1:480,721:730)=0;
            b(481:962,441:450)=0;
            b(481:962,462:470)=0;
            b(417:418,620:634)=0;
            b(419:421,637:655)=0;
            b(961:962,1:960)=0;
            b(1,1:960)=0;
            b(960,1:960)=0;
                       
            b(481:962,81:90)=0;
                                 
            b(1:481,101:105)=0;
            
            b(1:481,131:133)=0;
            b(1:481,141:145)=0;
            
            
            %%%temp blemish regions
            %       b(1:480,321:480)=0;
            %       b(1:480,721:810)=0;
            b(1:480,831:840)=0;
            
            
            
            %       b(481:962,801:810)=0; %add 1 strip
            %
            %       b(1:480,111:120)=0; %add 2nd strip
            %       b(1:480,101:110)=0; %add 3rd strip
            %%
            % bad=find(a>2);from RM data set
            fccd2_random_bad_pixels=load('fccd2_random_blemishpixels.mat');
            b(fccd2_random_bad_pixels.bad)=0;
            
        elseif (ccdimginfo.detector.rows == 92) %as of Aug 2014
            b(1:45,121:130)=0;
            b(1:45,721:730)=0;
            b(91:92,1:960)=0;
            b(46:92,441:450)=0;
            b(46:92,461:470)=0;
            b(46:92,771:780)=0;
            
            
            
            
            b(1:45,831:840)=0;
        end
        
    end
end

% =========================================================================
% --- Detector 25 : Lambda 750K
% =========================================================================
% if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'LAMBDA', 'once')) )
if strcmpi(ccdimginfo.detector.manufacturer{1},'LAMBDA')
    
    foo = load('Blemish_Th5p5keV.mat');
    b=foo.b;    
    b(16,157)=0; %found at 7.4 keV
    b(166:167,796)=0;
    b(135,453)=0;
    b(146,488)=0;
    b(110,465)=0;
    b(74,499)=0;
    b(469,1065)=0;
    %found during Ludwig
    b(507,254)=0;
    %found during jonghun201704
    b(241,600)=0;
    %found during ramanan201706 at 7
%     b(264,1252)=0;
    %found during archer201706 at 7
    b(238,1114)=0;
    b(165,324)=0;
    %found during archer201712 at 7
    b(8,192)=0;
    b(433,134)=0;
    b(245,1485)=0;
    b(22,84)=0;
    b(453,16)=0;
    b(191,1554)=0;
    %more
    b(448,88)=0;
    b(295,240)=0;    
    b(142,144)=0;
    b(85,44)=0;
    b(201,1548)=0;
    b(4,325)=0;
    b(24,442)=0;
    b(10,443)=0;
    b(127,415)=0;
    b(169,506)=0;
    b(144,504)=0;
    b(130,482)=0;
    b(78,638)=0;
    %more
    b(78,638)=0;
    b(81,466:467)=0;
    b(104,463)=0;
    b(120,436)=0;
    b(127,415)=0;
    b(72,376)=0;
    b(58,234)=0;
    b(96,218)=0;
    b(173,213)=0;
    b(196,221)=0;
    b(145,175)=0;
    b(142,144)=0;    
end

%=========================================================================
% --- Detector 26 : Lambda 250K
% =========================================================================
% if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'LAMBDA250K', 'once')) )
if  strcmpi(ccdimginfo.detector.manufacturer{1},'LAMBDA250K')
    b=ones(516,516);
    
    b(:,256:261)=0;
    b(256:261,:)=0;
    
    
    %hot pixels
    b(369,181)=0;
    b(213,238)=0;
    b(264,167)=0;
    
    foo=load('lambda_250k_deadpixels.mat'); %%came from B002 from comm201907 using avg image < 0.1, 51 dead pixels found
    b(foo.dead_pixels)=0;
end

%=========================================================================
% --- Detector 27: Lambda 2M
% =========================================================================
% if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'LAMBDA250K', 'once')) )
if  strcmpi(ccdimginfo.detector.manufacturer{1},'LAMBDA2M')
    b = lambda2M_blemish;
end
% =========================================================================
% --- Detector 30 : Eiger
% =========================================================================
if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'EIGER', 'once')) )        
        %this flatfield matfile is saved in DetectorFiles directory in XPCSGUI2
%         foo=load('eiger_blemish_apr03_1.mat'); %used for the loaner eiger 1M
        %eiger 500K from APS DP based on removing pixels beyond +/- 2%
        %variation in the flatfield given by Dectris in the master h5 file
        foo=load('eiger500K_blemish_10062017.mat');
        b=foo.b;        
        
        %add the dead gaps from eiger
        %vertical gaps
        b(:,1:5)=0;
        b(:,256:259)=0;
        b(:,514:517)=0;
        b(:,772:775)=0;
        b(:,1025:end)=0;
        %horizontal gaps
        b(1:7,:)=0;
        b(256:259,:)=0;
        b(529:end,:)=0;
                
        %more blemish regions found during Mark on March 4, 2015
% %         b(491,154)=0;%%removed for 500K for now, was used for 1M
        % ---
        % ---
%     end
end
% =========================================================================
% --- Detector 35 : UFXC_128x256
% =========================================================================
if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'UFXC_128x256', 'once')) )
    % ---
    b = ones(ccdimginfo.detector.SensorSizeRows                             ...
        ,ccdimginfo.detector.SensorSizeCols,'single')                       ;
    tmp_blemish=load('blemish_UFXC_Nov23_lurio201811.mat');
    b = tmp_blemish.b;    
    
    % QZ added on 04/02/19
    b(101,194) = 0;
    % ---    
end
% =========================================================================
% --- Detector 40 : VIPIC
% =========================================================================
if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'VIPIC', 'once')) )
    % ---
    b = ones(ccdimginfo.detector.SensorSizeRows                             ...
        ,ccdimginfo.detector.SensorSizeCols,'single')                       ;
    % ---
    
end
% =========================================================================
% --- Detector 45 : RIGAKU500K
% =========================================================================
if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'RIGAKU500K', 'once')) )
    % ---
    b = ones(ccdimginfo.detector.SensorSizeRows                             ...
        ,ccdimginfo.detector.SensorSizeCols,'single')                          ; 
    
    b(128-1:128+1,:) = 0;    
    b(128*2-1:128*2+1,:) = 0;
    b(128*3-1:128*3+1,:) = 0;
    b(128*4-1:128*4+1,:) = 0;
    b(128*5-1:128*5+1,:) = 0;
    b(128*6-1:128*6+1,:) = 0;
    b(128*7-1:128*7+1,:) = 0;
    
    b(1:5,:) = 0;
    b(end-4:end,:) = 0;
    

    b(:,256-1:256+1) = 0;
    
    tmp_x=load('Rigaku500K_Blemish_Auto.mat'); %generated using Rigaku500K_Blemish_Extraction.m
    
    b=b.*single(tmp_x.b_auto);
    
    % Blemish file for 04/09/19
    
    b(701,94) = 0;
    b(702,104) = 0;
    b(650,154) = 0;
    b(368,177) = 0;
    b(651,306) = 0;
    b(704,172) = 0;
    b(462,392) = 0;
    b(95,472) = 0;  
    b(352,52) = 0; 
    b(266,226) = 0; 
    
    %time marker strip
    b(:,1:5)=0;
    b(:,end-4:end)=0;
    
    
    % Blemish file for 04/09/19
    
    b(707,215) = 0;
    b(693,395) = 0;
    b(440,34) = 0;
    b(313,396) = 0;
    b(294,370) = 0;
    b(831,202) = 0;
    b(827,207) = 0;
    b(827,239) = 0;
    b(837,258) = 0;
    b(833,273) = 0;
    b(837,279) = 0;
    b(828,293) = 0;
    b(830,299) = 0;    
    b(824,304) = 0;
    b(833,308) = 0;
    b(771,429) = 0;
    b(191,242) = 0;    
    b(158,323) = 0; 
    b(942,322) = 0;
    b(963,250) = 0;    
    b(62,159) = 0;
    b(57,164) = 0;
    b(63,192) = 0;
    b(65,215) = 0;
    b(62,393) = 0;
    
    %11/11/2020
    b(821,221)=0;    
end


% =========================================================================
% --- Detector 46 : RIGAKU500K No gap
% =========================================================================
if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'RIGAKU500K_NoGap', 'once')) )
    % ---
    b = ones(ccdimginfo.detector.SensorSizeRows                             ...
        ,ccdimginfo.detector.SensorSizeCols,'single')                          ;
    
    %time marker strip
    b(:,1:5)=0;
    b(:,end-4:end)=0;
    b(1:5,:)=0;
    b(end-4:end,:)=0;
    
    
    b(1015,256) = 0;
    b(899,98) = 0;
    b(845,179) = 0;
    b(845,180) = 0;
    b(844,179) = 0;
    b(779,245) = 0;
    b(699,293) = 0;
    b(686,108) = 0;
    b(699,293) = 0;
    b(619,195) = 0;
    b(549,368) = 0;
    b(530,312) = 0;
    b(385,313) = 0;
    b(147-1:147+1,262-1:262+1) = 0;
    b(261,215) = 0;
    b(255,383) = 0;
    b(734,30:34) = 0;
    b(618,195) = 0;
    b(529,311) = 0;
    b(618,198) = 0;
    b(593,176) = 0;
    b(413,52) = 0;
    
    b(554,415) = 0;
    b(456,413) = 0;
    b(521,164) = 0;
    b(314,196) = 0;
    b(784,177) = 0;
    b(903,254) = 0;
    b(1013,256) = 0;
    b(516,435) = 0;
    b(385,311) = 0;
    
    b(413:414,51:53) = 0;
    b(349,497:499) = 0;
    
    b(412,51) = 0;
    
    b(404,417) = 0;
    b(470,427) = 0;
    b(427,360) = 0;
    b(336,451) = 0;
    b(404,417) = 0;
    b(284,354) = 0;
    b(619,196) = 0;
    b(220,166) = 0;
    
    b(313,223) = 0;
    b(261,214) = 0;
    b(791,442) = 0;
    b(169,264) = 0;
    b(382,315) = 0;
    b(591,175) = 0;
        
    %found bad during stephenson201910
    b(734,29)=0;
    b(733,32:33)=0;
    
    % Added on 10/21/19
    b(618,196) = 0;
    b(512,256) = 0;
    b(844,180) = 0;
    b(412,50:52) = 0;
    b(504,256) = 0;
    b(815,136) = 0;
    
    % Added on 11/09/19
    b(413:414,54) = 0;
    b(822,391) = 0;
    %these pixels are excess doubles found during lurio201911
%     b(681:731,486:511) = 0;
%     b(431:467,1:26) = 0;
%     b(:,6) = 0;
%     b(:,257:258) = 0;

    % Added on 02/27/20
    b(619,194) = 0;
    b(620,195) = 0;
%     
%     
    
%     v1 = [  7,   8,   8,  33,  39,  49,  57,  60,  75,  78,  80,  81,  94, 131,...
%         156, 168, 169, 169, 171, 177, 188, 205, 213, 231, 255, 262, 266, 267, 268, ...
%         268, 269, 271, 271, 275, 277, 279, 279, 289, 296, 296, 316, 324, 325, 327, ...
%         327, 348, 354, 356, 358, 369, 375, 375, 377, 381, 383, 399, 402, 410, 411, 420, ...
%         438, 443, 446, 477, 481, 502];
%     v2 = [ 510,  508,  575,  851,  509,  412,  508,  509, 1015,  404,  395, ...
%         216,  665, 1000,   67,  507,  417,  958,  323,  304,   30,  246, ...
%         7,  950,  197,  128,  201,  186,  196,  837,  193,  175,  197, ...
%         138,  893,  710,  892,  197,  234,  892,  124, 1013,  123,  246, ...
%         889, 1001,  143,  127,  121,  190,  251,  828,  192,  226,  919, ...
%         690,  949,  122,   74,  364,  868,  202,  734,  874,  901,  231];
%     for i = 1:length(v1)
%         b(v2(i)+1,v1(i)+1) = 0;
%     end
        
    % Added on 11/23/19
    b(815,136) = 0;
    b(735,32) = 0;
    
    % Added on 06/16/20
    b(691,400) = 0;  
    b(284,354) = 0;  
    b(32,189) = 0;
    b(413,50) = 0;
    
    % Added on 12/08/20
    b(821,221) = 0; 

    
    % Added on 12/14/20
    b(618:620,194:197) = 0; 
    b(845:846,178:179) = 0; 
    
    b(415,52:53) = 0;
    
end

% =========================================================================
% --- Detector 50 : VOXTEL
% =========================================================================
if ( ~isempty(regexp(ccdimginfo.detector.manufacturer{1},'VOXTEL', 'once')) )
    % ---
    b = ones(ccdimginfo.detector.SensorSizeRows                             ...
        ,ccdimginfo.detector.SensorSizeCols,'single')                       ;
    % ---
    % zeros
    b(1,12)=0;
    b(1,34)=0;
    b(3,9)=0;
    b(6:7,4)=0;
    
    %hot
    b(28,2)=0;
    b(30,4)=0;
    b(32,1)=0;
    b(28,47:48)=0;
    b(28,47:48)=0;
    b(31,47)=0;
    b(33,31)=0;
    b(36,45:48)=0;
    b(37,48)=0;
    b(37:39,42)=0;
    b(45:46,44)=0;
    
    %zeros
    b(22,42)=0;
    b(31,24)=0;
    b(32,36)=0;
    b(33,31)=0;
    b(34,21)=0;
    b(36,31)=0;
    b(36,34:36)=0;
    b(37:38,26)=0;
    b(37:38,28)=0;
    b(37,38)=0;
    b(38,34)=0;
    b(40,26)=0;
    b(40,28)=0;
    b(40,30)=0;
    b(40,32)=0;
    b(40,32)=0;
    b(40,38:39)=0;
    b(41,21)=0;
    b(41,31)=0;
    b(41,35)=0;
    b(42,30)=0;
    b(43,24)=0;
    b(43,40)=0;
    b(44:46,25)=0;
    b(44,36)=0;
    b(45,11)=0;
    b(45,20)=0;
    b(45,31)=0;
    b(45,33)=0;
    b(45,37)=0;
    b(45,39)=0;
    b(46,12)=0; %maybe?
    b(46,13)=0;
    b(46,25)=0;
    b(46,30)=0;
    b(46,35)=0;
    b(46,40)=0;
end
% =========================================================================
% --- Reduce to ROI size and if needed to a slice size
% =========================================================================
if ( ccdimginfo.detector.kinetics.mode == 0 )                                              % full frame mode
    blemish = b(ccdimginfo.detector.y_begin+1:ccdimginfo.detector.y_end+1,                  ...
        ccdimginfo.detector.x_begin+1:ccdimginfo.detector.x_end+1)                     ; % take only ROI
    clear b                                                                ;
else                                                                         % kinetics mode
    dummy(:,:) = b(ccdimginfo.detector.y_begin+1:ccdimginfo.detector.y_end+1,         ...
        ccdimginfo.detector.x_begin+1:ccdimginfo.detector.x_end+1)            ; % take only ROI
    [~,j]      = find(dummy == 0)                                          ; % find all zeros in dummy
    dummy(:,j) = 0                                                         ; % set all values of columns containing a zero to zero
    blemish(:,:)     = dummy(1 : ccdimginfo.detector.kinetics.window_size,:)                  ;
    clear b dummy i j                                                      ;
end

% =========================================================================
% --- blemish for binning
% =========================================================================
blemish = blemish_binimg(blemish,ccdimginfo.bin.swbinX,ccdimginfo.bin.swbinY);
blemish(blemish~=ccdimginfo.bin.swbinX*ccdimginfo.bin.swbinY) = 0;

end

function blemish = blemish_binimg(blemish,swbinX,swbinY)
if swbinY ~=1 || swbinX ~=1
    [rows, cols] = size(blemish);
    % --- remove last rows and cols if not divisible
    blemish = blemish(1:end-mod(rows,swbinY),1:end-mod(cols,swbinX));
    [rows,cols] = size(blemish);        % new rows and cols
    % --- bin
    blemish = transpose(reshape(sum(reshape(blemish,swbinY,[]),1),rows/swbinY,[]));
    blemish = transpose(reshape(sum(reshape(blemish,swbinX,[]),1),cols/swbinX,[]));
end

end

